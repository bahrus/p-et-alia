{
  "version": "experimental",
  "tags": [
    {
      "name": "p-d-r",
      "description": "Pass data from one element down the DOM tree to other elements, including children, recursively.\nOnly drills into children if p-d-if matches css of p-d-r element.",
      "attributes": [
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ]
    },
    {
      "name": "p-d-x",
      "description": "Extends element p-d with experimental features.",
      "attributes": [
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "guid"
        },
        {
          "name": "del",
          "type": "boolean"
        },
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ]
    },
    {
      "name": "p-d",
      "description": "Pass data from one element down the DOM tree to other elements",
      "attributes": [
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        },
        {
          "name": "from",
          "description": "Source element to start matches from"
        },
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from"
        },
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        }
      ]
    },
    {
      "name": "p-h-d",
      "description": "Pass history to downstream elements",
      "attributes": [
        {
          "name": "init-and-pop-state-only",
          "description": "Only pass down history if is initial history and/or popstate event"
        },
        {
          "name": "from-path",
          "description": "JS path within history.state to pass down."
        },
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "initAndPopStateOnly",
          "attribute": "init-and-pop-state-only",
          "description": "Only pass down history if is initial history and/or popstate event"
        },
        {
          "name": "fromPath",
          "attribute": "from-path",
          "description": "JS path within history.state to pass down."
        },
        {
          "name": "guid",
          "type": "string"
        },
        {
          "name": "del",
          "type": "boolean"
        },
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ]
    },
    {
      "name": "p-u",
      "description": "Pass data from one element to a targeted DOM element elsewhere",
      "attributes": [
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        }
      ]
    },
    {
      "name": "p-unt",
      "description": "Dispatch event when previous non p-element triggers prescribed event",
      "attributes": [
        {
          "name": "bubbles",
          "description": "event should bubble up"
        },
        {
          "name": "composed",
          "description": "Event bubbling should pierce shadow dom"
        },
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "bubbles",
          "attribute": "bubbles",
          "description": "event should bubble up"
        },
        {
          "name": "composed",
          "attribute": "composed",
          "description": "Event bubbling should pierce shadow dom"
        },
        {
          "name": "cancelable"
        },
        {
          "name": "dispatch",
          "description": "dispatch event"
        },
        {
          "name": "guid",
          "type": "string"
        },
        {
          "name": "del",
          "type": "boolean"
        },
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ]
    },
    {
      "name": "p-w",
      "description": "\"planted weirwood\" -- passes data down just like p-d, but also updates history.state",
      "attributes": [
        {
          "name": "state-path",
          "description": "path within history.state to deep merge data into"
        },
        {
          "name": "push",
          "description": "push new stack element into history",
          "type": "boolean"
        },
        {
          "name": "cc",
          "description": "Should carbon copy data to state",
          "type": "boolean"
        },
        {
          "name": "bubbles",
          "description": "event should bubble up",
          "type": "boolean"
        },
        {
          "name": "composed",
          "description": "Event bubbling should pierce shadow dom",
          "type": "boolean"
        },
        {
          "name": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "statePath",
          "attribute": "state-path",
          "description": "path within history.state to deep merge data into"
        },
        {
          "name": "push",
          "attribute": "push",
          "description": "push new stack element into history",
          "type": "boolean"
        },
        {
          "name": "cc",
          "attribute": "cc",
          "description": "Should carbon copy data to state",
          "type": "boolean"
        },
        {
          "name": "bubbles",
          "attribute": "bubbles",
          "description": "event should bubble up",
          "type": "boolean"
        },
        {
          "name": "composed",
          "attribute": "composed",
          "description": "Event bubbling should pierce shadow dom",
          "type": "boolean"
        },
        {
          "name": "cancelable",
          "type": "boolean"
        },
        {
          "name": "dispatch",
          "description": "dispatch event",
          "type": "boolean"
        },
        {
          "name": "guid",
          "type": "string"
        },
        {
          "name": "del",
          "type": "boolean"
        },
        {
          "name": "observe",
          "attribute": "observe",
          "description": "Specifies element to latch on to, and listen for events.",
          "type": "string"
        },
        {
          "name": "withPath",
          "attribute": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "type": "string"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "type": "{ [key: string]: number; }",
          "default": "{}"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        },
        {
          "name": "on",
          "attribute": "on",
          "description": "The event name to monitor for, from previous non-petalian element.",
          "type": "string"
        },
        {
          "name": "to",
          "attribute": "to",
          "description": "css pattern to match for from downstream siblings.",
          "type": "string"
        },
        {
          "name": "careOf",
          "attribute": "care-of",
          "description": "CSS Selector to use to select single child within the destination element.",
          "type": "string"
        },
        {
          "name": "noblock",
          "attribute": "noblock",
          "description": "Don't block event propagation.",
          "type": "boolean"
        },
        {
          "name": "if",
          "attribute": "if",
          "description": "Only act on event if target element css-matches the expression specified by this attribute.",
          "type": "string"
        },
        {
          "name": "prop",
          "attribute": "prop",
          "description": "Name of property to set on matching downstream siblings.",
          "type": "string | symbol"
        },
        {
          "name": "val",
          "attribute": "val",
          "description": "Specifies path to JS object from event, that should be passed to downstream siblings.  Value of '.' passes entire entire object.",
          "type": "string"
        },
        {
          "name": "fireEvent",
          "attribute": "fire-event",
          "description": "Artificially fire event on target element whose name is specified by this attribute.",
          "type": "string"
        },
        {
          "name": "from",
          "attribute": "from",
          "description": "Source element to start matches from",
          "type": "string"
        },
        {
          "name": "m",
          "attribute": "m",
          "description": "Maximum number of matching elements expected to be found.",
          "type": "number"
        }
      ]
    }
  ]
}